// Generated by CoffeeScript 1.9.2
(function() {
  var _, makeVTable,
    slice = [].slice;

  _ = require('lodash');


  /*
  Virtual method table implementation for dynamic dispatch.
  
    selector: Function - When a function is called from the vtable, the `self`
      argument (conventionally, the first argument) is provided to `selector` as
      an argument. The result is a key which is used to index into `extensions`.
      If `extensions` associates the key with an extension type, the extension's
      method is invoked.
    base: Object - The base prototype for dispatch; this prototype's
      implementation is invoked when `selector` does not produce a registered
      extension key.
    extensions: { String -> Object } - Maps keys to extension prototypes.
   */

  makeVTable = function(selector, base, extensions) {
    var extensionKeys;
    extensionKeys = _.keys(extensions);
    return _(base).methods().map(function(key) {
      var method;
      method = function() {
        var args, ext, self;
        self = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        ext = extensions[selector(self)];
        if ((ext != null ? ext[key] : void 0) != null) {
          return ext[key].apply(ext, [self].concat(slice.call(args)));
        } else {
          return base[key].apply(base, [self].concat(slice.call(args)));
        }
      };
      return [key, method];
    }).zipObject().value();
  };

  module.exports = makeVTable;

}).call(this);

//# sourceMappingURL=vtable.js.map
