// Generated by CoffeeScript 1.9.2
(function() {
  var Timelines, _, addChildReducers, k, mapAssign, reducer, updeep,
    slice = [].slice;

  _ = require('lodash');

  updeep = require('updeep');

  k = require('../ActionTypes');

  mapAssign = require('../util/mapAssign');

  addChildReducers = require('../util/addChildReducers');

  Timelines = require('../model/timelines/Timelines');

  reducer = function(state, action) {
    var change, id, mapping, position, ref, ref1, ref2, ref3, shouldLoop, timeline;
    if (state == null) {
      state = {
        dict: {},
        _spawnedCount: 0
      };
    }
    switch (action.type) {
      case k.AddTimeline:
        ref = _.defaults(action.data, {
          id: "timeline-" + state._spawnedCount
        }), id = ref.id, timeline = ref.timeline;
        change = {};
        change[id] = _.assign({}, timeline, {
          id: id
        });
        return _.assign({}, state, {
          dict: _.assign({}, state.dict, change)
        });
      case k.AddTrigger:
        ref1 = action.data, timeline = ref1.timeline, position = ref1.position, action = ref1.action;
        return mapAssign(_.cloneDeep(state), "dict." + timeline + ".triggers", function(oldTriggers) {
          return slice.call(oldTriggers).concat([{
              position: position,
              action: action
            }]);
        });
      case k.AddMapping:
        ref2 = action.data, timeline = ref2.timeline, mapping = ref2.mapping;
        return mapAssign(_.cloneDeep(state), "dict." + timeline + ".mappings", function(oldMappings) {
          return slice.call(oldMappings).concat([mapping]);
        });
      case k.SetTimelineLoop:
        ref3 = action.data, timeline = ref3.timeline, shouldLoop = ref3.shouldLoop;
        return mapAssign(_.cloneDeep(state), "dict." + timeline, function(t) {
          return Timelines.setLoop(t, shouldLoop);
        });
      default:
        return state;
    }
  };

  module.exports = reducer;

}).call(this);

//# sourceMappingURL=TimelinesReducer.js.map
