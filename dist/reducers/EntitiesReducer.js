// Generated by CoffeeScript 1.9.2
(function() {
  var Entity, _, addChildReducers, editEntity, k, mapAssign, reducer, updeep;

  _ = require('lodash');

  updeep = require('updeep');

  k = require('../ActionTypes');

  mapAssign = require('../util/mapAssign');

  addChildReducers = require('../util/addChildReducers');

  Entity = require('../model/Entity');

  editEntity = function(state, entityId, proc) {
    var changes, entity;
    entity = state.dict[entityId];
    if (entity != null) {
      changes = {};
      changes[entityId] = proc(entity);
      return _.assign({}, state, {
        dict: _.assign({}, state.dict, changes)
      });
    } else {
      throw new Error("Attempted to update non-existant entity " + entityId + ".");
      return state;
    }
  };

  reducer = function(state, action) {
    var changes, entity, id, initialData, localData, name, ref, ref1;
    if (state == null) {
      state = {
        dict: {},
        _spawnedCount: 0
      };
    }
    switch (action.type) {
      case k.AddEntity:
        ref = _.defaults({}, action.data, {
          id: "entity-" + state._spawnedCount,
          name: null,
          initialData: {}
        }), id = ref.id, name = ref.name, initialData = ref.initialData;
        changes = {
          dict: {},
          _spawnedCount: state._spawnedCount + 1
        };
        changes.dict[id] = new Entity(id, name, [], initialData);
        if (name != null) {
          changes.dict[id].name = name;
        }
        return updeep(changes, state);
      case k.SetEntityLocalData:
        ref1 = action.data, entity = ref1.entity, localData = ref1.localData;
        return editEntity(state, entity, function(e) {
          return _.assign({}, e, {
            localData: localData
          });
        });
      default:
        return state;
    }
  };

  module.exports = reducer;

}).call(this);

//# sourceMappingURL=EntitiesReducer.js.map
