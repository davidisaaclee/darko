// Generated by CoffeeScript 1.9.2
(function() {
  var Entity, Scene, Timelines, _, addChildReducers, buildObjectWithPropertyKey, clamp, entitiesReducer, k, mapAssign, reducer, timelinesReducer, updeep, wrap;

  _ = require('lodash');

  updeep = require('updeep');

  k = require('../ActionTypes');

  mapAssign = require('../util/mapAssign');

  addChildReducers = require('../util/addChildReducers');

  clamp = require('../util/clamp');

  wrap = require('../util/wrap');

  timelinesReducer = require('./TimelinesReducer');

  entitiesReducer = require('./EntitiesReducer');

  Scene = require('../model/Scene');

  Entity = require('../model/Entity');

  Timelines = require('../model/timelines/Timelines');

  buildObjectWithPropertyKey = require('../util/buildObjectWithPropertyKey');

  reducer = function(state, action) {
    var delta, entity, progress, ref, ref1, ref2, stackPosition, state_, timeline, timelineObj;
    if (state == null) {
      state = {};
    }
    switch (action.type) {
      case k.ProgressTimeline:
        ref = action.data, timeline = ref.timeline, delta = ref.delta;
        return Scene.progressTimeline(state, timeline, delta);
      case k.ProgressEntityTimeline:
        ref1 = action.data, entity = ref1.entity, timeline = ref1.timeline, delta = ref1.delta;
        return Scene.progressTimeline(state, timeline, delta, [entity]);
      case k.AttachEntityToTimeline:
        ref2 = _.defaults(action.data, {
          stackPosition: 0,
          progress: 0
        }), entity = ref2.entity, timeline = ref2.timeline, progress = ref2.progress, stackPosition = ref2.stackPosition;
        timelineObj = Scene.getTimeline(state, timeline);
        state_ = Scene.mutateEntity(state, entity, function(e) {
          if (!Entity.isAttachedToTimeline(e, timeline)) {
            return Entity.attachTimeline(e, timelineObj, progress, stackPosition);
          } else {
            return e;
          }
        });
        return Scene.progressTimeline(state_, timeline, 0, [entity]);
      default:
        return state;
    }
  };

  module.exports = addChildReducers(reducer, {
    'timelines': timelinesReducer,
    'entities': entitiesReducer
  });

}).call(this);

//# sourceMappingURL=SceneReducer.js.map
